design <- svydesign(ids = ids, data = subset(full.swsmoteenc, select = -FACTOR_EXPANSION), weights = wts)
modelo <- svyglm(formula = ACTIVIDAD_OCUPADA_ULTIMA_SEMANA ~., design = design,
family = quasibinomial())
modelo <- svyglm(formula = ACTIVIDAD_OCUPADA_ULTIMA_SEMANA ~., design = design, family = quasibinomial())
design <- svydesign(ids = ids, data = full.swsmoteenc, weights = wts)
modelo <- svyglm(formula = ACTIVIDAD_OCUPADA_ULTIMA_SEMANA ~., design = design, family = quasibinomial())
design <- svydesign(ids = ids, data = full.swsmoteenc, weights = ~wts)
modelo <- svyglm(formula = ACTIVIDAD_OCUPADA_ULTIMA_SEMANA ~., design = design, family = quasibinomial())
modelo <- svyglm(formula = ACTIVIDAD_OCUPADA_ULTIMA_SEMANA ~., design = design,
family = quasibinomial(), rescaled = TRUE)
modelo <- svyglm(formula = ACTIVIDAD_OCUPADA_ULTIMA_SEMANA ~., design = design,
family = quasibinomial(), rescale = TRUE)
full.swsmoteenc$ids <- seq(1, nrow(full.swsmoteenc))
design <- svydesign(ids = ~ids, data = full.swsmoteenc, weights = ~FACTOR_EXPANSION)
modelo <- svyglm(formula = ACTIVIDAD_OCUPADA_ULTIMA_SEMANA ~., design = design,
family = quasibinomial(), rescale = TRUE)
colnames(full.swsmoteenc)
modelo <- svyglm(formula = ACTIVIDAD_OCUPADA_ULTIMA_SEMANA ~ ZONA_TERRITORIAL + DPTO + SEXO + EDAD +
PARENTESCO_JEFE_DE_HOGAR + MADRE_RESIDE_HOGAR + PADRE_RESIDE_HOGAR + SE_CONSIDERA_CAMPESINO +
COMUNIDAD_ES_CAMPESINA + ETNIA + ESTADO_CIVIL + AFILIADO_SALUD + LEER_ESCRIBIR +
ACTUALMENTE_ESTUDIA + MAYOR_NIVEL_EDUCATIVO + ORIENTACION_SEXUAL + GENERO +
TIPO_VIVIENDA + SERVICIOS_ENERGIA_ELECTRICA + ESTRATO_ENERGIA_ELECTRICA + SERVICIOS_GAS_NATURAL +
SERVICIOS_ALCANTARILLADO + SERVICIOS_RECOLECCION_BASURAS +SERVICIOS_ACUEDUCTO+
NUMERO_HOGARES_VIVIENDA +NUMERO_CUARTOS_VIVIENDA +NUMERO_CUARTOS_DORMIR +
TIPO_SANITARIO+COMO_ELIMINA_BASURA +DONDE_OBTIENE_AGUA +DONDE_PREPARA_ALIMENTOS +
TIPO_OCUPACION_VIVIENDA+HOGAR_TIENE_CUENTA_CORRIENTE +HOGAR_TIENE_CUENTA_AHORROS +HOGAR_TIENE_CDT +
HOGAR_TIENE_PRESTAMO_COMPRA_VIVIENDA+HOGAR_TIENE_PRESTAMO_COMPRA_VEHICULO +HOGAR_TIENE_PRESTAMO_LIBRE_INVERSION +
HOGAR_TIENE_TARJETA_CREDITO +NUMERO_PERSONAS_HOGAR+DISCAPACIDAD,
design = design,
family = quasibinomial(), rescale = TRUE)
step(modelo)
paste(rownames(train))
paste(col(train))
paste(colnems(train))
paste(colnames(train))
modelo <- svyglm(formula = ACTIVIDAD_OCUPADA_ULTIMA_SEMANA ~ ZONA_TERRITORIAL + DPTO + SEXO + EDAD +
PARENTESCO_JEFE_DE_HOGAR + MADRE_RESIDE_HOGAR + PADRE_RESIDE_HOGAR + SE_CONSIDERA_CAMPESINO +
COMUNIDAD_ES_CAMPESINA + ETNIA + ESTADO_CIVIL + AFILIADO_SALUD + LEER_ESCRIBIR +
ACTUALMENTE_ESTUDIA + MAYOR_NIVEL_EDUCATIVO + ORIENTACION_SEXUAL + GENERO +
TIPO_VIVIENDA + SERVICIOS_ENERGIA_ELECTRICA + ESTRATO_ENERGIA_ELECTRICA + SERVICIOS_GAS_NATURAL +
SERVICIOS_ALCANTARILLADO + SERVICIOS_RECOLECCION_BASURAS +SERVICIOS_ACUEDUCTO+
NUMERO_HOGARES_VIVIENDA +NUMERO_CUARTOS_VIVIENDA +NUMERO_CUARTOS_DORMIR +
TIPO_SANITARIO+COMO_ELIMINA_BASURA +DONDE_OBTIENE_AGUA +DONDE_PREPARA_ALIMENTOS +
TIPO_OCUPACION_VIVIENDA+HOGAR_TIENE_CUENTA_CORRIENTE +HOGAR_TIENE_CUENTA_AHORROS +HOGAR_TIENE_CDT +
HOGAR_TIENE_PRESTAMO_COMPRA_VIVIENDA+HOGAR_TIENE_PRESTAMO_COMPRA_VEHICULO +HOGAR_TIENE_PRESTAMO_LIBRE_INVERSION +
HOGAR_TIENE_TARJETA_CREDITO +NUMERO_PERSONAS_HOGAR+DISCAPACIDAD,
design = design,
family = quasibinomial())
step(modelo)
write.csv(full.adasyn,
file = "C:/Users/andre/OneDrive/Escritorio/Proyecto de Grado/result/db_train_test/train_adasyn.csv",
sep = ";")
write.csv(full.adasyn,
file = "C:/Users/andre/OneDrive/Escritorio/Proyecto de Grado/result/db_train_test/train_adasyn.csv")
write.csv(full.smote,
file = "C:/Users/andre/OneDrive/Escritorio/Proyecto de Grado/result/db_train_test/train_smote.csv")
write.csv(full.swsmoteenc,
file = "C:/Users/andre/OneDrive/Escritorio/Proyecto de Grado/result/db_train_test/train_swsmote.csv")
write.csv(test,
file = "C:/Users/andre/OneDrive/Escritorio/Proyecto de Grado/result/db_train_test/test_adasyn.csv")
## Prueba Tipos de SMOTE con ajuste de pesos por regresión logística
# 1. Versión - SMOTE.ENC Clásico
# 2. Versión - Uso sintético de SMOTE.ENC con ADASYN
# 3. Versión - SWSMOTEENC
library(survey)
library(dplyr)
source("C:\\Users\\andre\\OneDrive\\Escritorio\\Proyecto de Grado\\notebooks\\R\\oversampling.R")
source("C:\\Users\\andre\\OneDrive\\Escritorio\\Proyecto de Grado\\notebooks\\R\\Extras.R")
## Dataframe Base
data <- read.csv("C:/Users/andre/OneDrive/Escritorio/Proyecto de Grado/result/db_agrupado/Enero_Agrupado.csv", sep=";")
data <- subset(data, select = -DIRECTORIO)
# Plantación de Semilla y Valores Base
seed = 3
set.seed(seed)
size = 0.7
target = "ACTIVIDAD_OCUPADA_ULTIMA_SEMANA"
minority.value = 0
k = 5
## Train Test split
train_index <- sample(nrow(data), size = size * nrow(data), replace = FALSE)
train <- data[train_index, ]
test <- data[-train_index, ]
rownames(train) <- NULL
rownames(test) <- NULL
## Ajuste del conjunto de entrenamiento para la generación de las muestras sintéticas
train.nowt <- subset(train, select = -FACTOR_EXPANSION)
train.nowt$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA = as.factor(train.nowt$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA)
vars.numeric <- names(train.nowt)[sapply(train.nowt, is.numeric)]
#### 1. Versión
### Método SMOTE ENC
synt.smote = SMOTE_ENC(train.nowt, target, minority.value, vars.numeric, k , seed)
synt.smote <- synt.smote %>% mutate(across(all_of(vars.numeric), as.numeric))
# Ajuste de Pesos para los datos sintéticos
synt.smote$FACTOR_EXPANSION = 1
train.smote <- train
train.smote$Pertenece = 0
synt.smote$Pertenece = 1
resample.smote = rbind(train.smote, synt.smote)
ids = seq(1, nrow(resample.smote))
design.smote <- svydesign(ids = ids, data = resample.smote, weights = resample.smote$FACTOR_EXPANSION)
model.smote = svyglm(formula = Pertenece ~ ZONA_TERRITORIAL + SEXO + EDAD +
ETNIA + ESTADO_CIVIL + LEER_ESCRIBIR + ACTUALMENTE_ESTUDIA +
MAYOR_NIVEL_EDUCATIVO + ORIENTACION_SEXUAL + GENERO + TIPO_VIVIENDA +
ESTRATO_ENERGIA_ELECTRICA + NUMERO_HOGARES_VIVIENDA + NUMERO_CUARTOS_VIVIENDA +
NUMERO_CUARTOS_DORMIR + DONDE_OBTIENE_AGUA + DONDE_PREPARA_ALIMENTOS +
TIPO_OCUPACION_VIVIENDA + NUMERO_PERSONAS_HOGAR + DISCAPACIDAD,
design = design.smote,
family = quasibinomial())
p_i.smote <- predict(model.smote, synt.smote, type = "response")
w_i.smote = 1/p_i.smote
synt.smote$FACTOR_EXPANSION <- w_i.smote
## Ajuste de los pesos
n_s_x = nrow(synt.smote)
n_s = nrow(train.smote)
w_i_x <- synt.smote$FACTOR_EXPANSION * ((n_s_x)/(n_s_x + n_s)) *((sum(train.smote$FACTOR_EXPANSION))/(sum(synt.smote$FACTOR_EXPANSION)))
w_i <- train.smote$FACTOR_EXPANSION * ((n_s)/(n_s + n_s_x))
synt.smote$FACTOR_EXPANSION <- w_i_x
train.smote$FACTOR_EXPANSION <- w_i
full.smote <- rbind(train.smote, synt.smote)
# Evaluación del Modelo
smote.glm <- survey_model(full.smote, test, "FACTOR_EXPANSION")
#### 2. Versión
### Método ADASYN
synt.adasyn = ADASYN(train.nowt, target, minority.value, vars.numeric, k , seed)
synt.adasyn <- synt.adasyn %>% mutate(across(all_of(vars.numeric), as.numeric))
# Ajuste de Pesos para los datos sintéticos
synt.adasyn$FACTOR_EXPANSION = 1
train.adasyn <- train
train.adasyn$Pertenece = 0
synt.adasyn$Pertenece = 1
resample.adasyn = rbind(train.adasyn, synt.adasyn)
ids = seq(1, nrow(resample.adasyn))
design.adasyn <- svydesign(ids = ids, data = resample.adasyn, weights = resample.adasyn$FACTOR_EXPANSION)
model.adasyn = svyglm(formula = Pertenece ~ ZONA_TERRITORIAL + SEXO + EDAD +
ETNIA + ESTADO_CIVIL + LEER_ESCRIBIR + ACTUALMENTE_ESTUDIA +
MAYOR_NIVEL_EDUCATIVO + ORIENTACION_SEXUAL + GENERO + TIPO_VIVIENDA +
ESTRATO_ENERGIA_ELECTRICA + NUMERO_HOGARES_VIVIENDA + NUMERO_CUARTOS_VIVIENDA +
NUMERO_CUARTOS_DORMIR + DONDE_OBTIENE_AGUA + DONDE_PREPARA_ALIMENTOS +
TIPO_OCUPACION_VIVIENDA + NUMERO_PERSONAS_HOGAR + DISCAPACIDAD,
design = design.adasyn,
family = quasibinomial())
p_i.adasyn <- predict(model.adasyn, synt.adasyn, type = "response")
w_i.adasyn = 1/p_i.adasyn
synt.adasyn$FACTOR_EXPANSION <- w_i.adasyn
## Ajuste de los pesos
n_s_x = nrow(synt.adasyn)
n_s = nrow(train.adasyn)
w_i_x <- synt.adasyn$FACTOR_EXPANSION * ((n_s_x)/(n_s_x + n_s)) *((sum(train.adasyn$FACTOR_EXPANSION))/(sum(synt.adasyn$FACTOR_EXPANSION)))
w_i <- train.adasyn$FACTOR_EXPANSION * ((n_s)/(n_s + n_s_x))
synt.adasyn$FACTOR_EXPANSION <- w_i_x
train.adasyn$FACTOR_EXPANSION <- w_i
full.adasyn <- rbind(train.adasyn, synt.adasyn)
# Evaluación del Modelo
adasyn.glm <- survey_model(full.adasyn, test, "FACTOR_EXPANSION")
#### 3. Versión
### Método SWSMOTEENC
factor.expansion <- train$FACTOR_EXPANSION
synt.swsmoteenc = SWSMOTEENC(train.nowt, factor.expansion, target, minority.value, vars.numeric, k , seed)
synt.swsmoteenc <- synt.swsmoteenc %>% mutate(across(all_of(vars.numeric), as.numeric))
# Ajuste de Pesos para los datos sintéticos
synt.swsmoteenc$FACTOR_EXPANSION = 1
train.swsmoteenc <- train
train.swsmoteenc$Pertenece = 0
synt.swsmoteenc$Pertenece = 1
resample.swsmoteenc = rbind(train.swsmoteenc, synt.swsmoteenc)
ids = seq(1, nrow(resample.swsmoteenc))
design.swsmoteenc <- svydesign(ids = ids, data = resample.swsmoteenc, weights = resample.swsmoteenc$FACTOR_EXPANSION)
model.swsmoteenc = svyglm(formula = Pertenece ~ ZONA_TERRITORIAL + SEXO + EDAD +
ETNIA + ESTADO_CIVIL + LEER_ESCRIBIR + ACTUALMENTE_ESTUDIA +
MAYOR_NIVEL_EDUCATIVO + ORIENTACION_SEXUAL + GENERO + TIPO_VIVIENDA +
ESTRATO_ENERGIA_ELECTRICA + NUMERO_HOGARES_VIVIENDA + NUMERO_CUARTOS_VIVIENDA +
NUMERO_CUARTOS_DORMIR + DONDE_OBTIENE_AGUA + DONDE_PREPARA_ALIMENTOS +
TIPO_OCUPACION_VIVIENDA + NUMERO_PERSONAS_HOGAR + DISCAPACIDAD,
design = design.swsmoteenc,
family = quasibinomial())
p_i.swsmoteenc <- predict(model.swsmoteenc, synt.swsmoteenc, type = "response")
w_i.swsmoteenc = 1/p_i.swsmoteenc
synt.swsmoteenc$FACTOR_EXPANSION <- w_i.swsmoteenc
## Ajuste de los pesos
n_s_x = nrow(synt.swsmoteenc)
n_s = nrow(train.swsmoteenc)
w_i_x <- synt.swsmoteenc$FACTOR_EXPANSION * ((n_s_x)/(n_s_x + n_s)) *((sum(train.swsmoteenc$FACTOR_EXPANSION))/(sum(synt.swsmoteenc$FACTOR_EXPANSION)))
w_i <- train.swsmoteenc$FACTOR_EXPANSION * ((n_s)/(n_s + n_s_x))
synt.swsmoteenc$FACTOR_EXPANSION <- w_i_x
train.swsmoteenc$FACTOR_EXPANSION <- w_i
full.swsmoteenc <- rbind(train.swsmoteenc, synt.swsmoteenc)
# Evaluación del Modelo
swsmoteenc.glm <- survey_model(full.swsmoteenc, test, "FACTOR_EXPANSION")
full.swsmoteenc$ids <- seq(1, nrow(full.swsmoteenc))
design <- svydesign(ids = ~ids, data = full.swsmoteenc, weights = ~FACTOR_EXPANSION)
modelo <- svyglm(formula = ACTIVIDAD_OCUPADA_ULTIMA_SEMANA ~ ZONA_TERRITORIAL + DPTO + SEXO + EDAD +
PARENTESCO_JEFE_DE_HOGAR + MADRE_RESIDE_HOGAR + PADRE_RESIDE_HOGAR + SE_CONSIDERA_CAMPESINO +
COMUNIDAD_ES_CAMPESINA + ETNIA + ESTADO_CIVIL + AFILIADO_SALUD + LEER_ESCRIBIR +
ACTUALMENTE_ESTUDIA + MAYOR_NIVEL_EDUCATIVO + ORIENTACION_SEXUAL + GENERO +
TIPO_VIVIENDA + SERVICIOS_ENERGIA_ELECTRICA + ESTRATO_ENERGIA_ELECTRICA + SERVICIOS_GAS_NATURAL +
SERVICIOS_ALCANTARILLADO + SERVICIOS_RECOLECCION_BASURAS +SERVICIOS_ACUEDUCTO+
NUMERO_HOGARES_VIVIENDA +NUMERO_CUARTOS_VIVIENDA +NUMERO_CUARTOS_DORMIR +
TIPO_SANITARIO+COMO_ELIMINA_BASURA +DONDE_OBTIENE_AGUA +DONDE_PREPARA_ALIMENTOS +
TIPO_OCUPACION_VIVIENDA+HOGAR_TIENE_CUENTA_CORRIENTE +HOGAR_TIENE_CUENTA_AHORROS +HOGAR_TIENE_CDT +
HOGAR_TIENE_PRESTAMO_COMPRA_VIVIENDA+HOGAR_TIENE_PRESTAMO_COMPRA_VEHICULO +HOGAR_TIENE_PRESTAMO_LIBRE_INVERSION +
HOGAR_TIENE_TARJETA_CREDITO +NUMERO_PERSONAS_HOGAR+DISCAPACIDAD,
design = design,
family = quasibinomial())
write.csv(full.adasyn,
file = "C:/Users/andre/OneDrive/Escritorio/Proyecto de Grado/result/db_train_test/train_adasyn.csv")
write.csv(full.smote,
file = "C:/Users/andre/OneDrive/Escritorio/Proyecto de Grado/result/db_train_test/train_smote.csv")
write.csv(full.swsmoteenc,
file = "C:/Users/andre/OneDrive/Escritorio/Proyecto de Grado/result/db_train_test/train_swsmote.csv")
write.csv(test,
file = "C:/Users/andre/OneDrive/Escritorio/Proyecto de Grado/result/db_train_test/test_adasyn.csv")
## Prueba Tipos de SMOTE con ajuste de pesos por regresión logística
# 1. Versión - SMOTE.ENC Clásico
# 2. Versión - Uso sintético de SMOTE.ENC con ADASYN
# 3. Versión - SWSMOTEENC
library(survey)
library(dplyr)
source("C:\\Users\\andre\\OneDrive\\Escritorio\\Proyecto de Grado\\notebooks\\R\\oversampling.R")
source("C:\\Users\\andre\\OneDrive\\Escritorio\\Proyecto de Grado\\notebooks\\R\\Extras.R")
## Dataframe Base
data <- read.csv("C:/Users/andre/OneDrive/Escritorio/Proyecto de Grado/result/db_agrupado/Enero_Agrupado.csv", sep=";")
data <- subset(data, select = -DIRECTORIO)
# Plantación de Semilla y Valores Base
seed = 3
set.seed(seed)
size = 0.7
target = "ACTIVIDAD_OCUPADA_ULTIMA_SEMANA"
minority.value = 0
k = 5
## Train Test split
train_index <- sample(nrow(data), size = size * nrow(data), replace = FALSE)
train <- data[train_index, ]
test <- data[-train_index, ]
rownames(train) <- NULL
rownames(test) <- NULL
## Ajuste del conjunto de entrenamiento para la generación de las muestras sintéticas
train.nowt <- subset(train, select = -FACTOR_EXPANSION)
train.nowt$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA = as.factor(train.nowt$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA)
vars.numeric <- names(train.nowt)[sapply(train.nowt, is.numeric)]
#### 1. Versión
### Método SMOTE ENC
synt.smote = SMOTE_ENC(train.nowt, target, minority.value, vars.numeric, k , seed)
synt.smote <- synt.smote %>% mutate(across(all_of(vars.numeric), as.numeric))
# Ajuste de Pesos para los datos sintéticos
synt.smote$FACTOR_EXPANSION = 1
train.smote <- train
train.smote$Pertenece = 0
synt.smote$Pertenece = 1
resample.smote = rbind(train.smote, synt.smote)
ids = seq(1, nrow(resample.smote))
design.smote <- svydesign(ids = ids, data = resample.smote, weights = resample.smote$FACTOR_EXPANSION)
model.smote = svyglm(formula = Pertenece ~ ZONA_TERRITORIAL + SEXO + EDAD +
ETNIA + ESTADO_CIVIL + LEER_ESCRIBIR + ACTUALMENTE_ESTUDIA +
MAYOR_NIVEL_EDUCATIVO + ORIENTACION_SEXUAL + GENERO + TIPO_VIVIENDA +
ESTRATO_ENERGIA_ELECTRICA + NUMERO_HOGARES_VIVIENDA + NUMERO_CUARTOS_VIVIENDA +
NUMERO_CUARTOS_DORMIR + DONDE_OBTIENE_AGUA + DONDE_PREPARA_ALIMENTOS +
TIPO_OCUPACION_VIVIENDA + NUMERO_PERSONAS_HOGAR + DISCAPACIDAD,
design = design.smote,
family = quasibinomial())
p_i.smote <- predict(model.smote, synt.smote, type = "response")
w_i.smote = 1/p_i.smote
synt.smote$FACTOR_EXPANSION <- w_i.smote
## Ajuste de los pesos
n_s_x = nrow(synt.smote)
n_s = nrow(train.smote)
w_i_x <- synt.smote$FACTOR_EXPANSION * ((n_s_x)/(n_s_x + n_s)) *((sum(train.smote$FACTOR_EXPANSION))/(sum(synt.smote$FACTOR_EXPANSION)))
w_i <- train.smote$FACTOR_EXPANSION * ((n_s)/(n_s + n_s_x))
synt.smote$FACTOR_EXPANSION <- w_i_x
train.smote$FACTOR_EXPANSION <- w_i
full.smote <- rbind(train.smote, synt.smote)
# Evaluación del Modelo
smote.glm <- survey_model(full.smote, test, "FACTOR_EXPANSION")
#### 2. Versión
### Método ADASYN
synt.adasyn = ADASYN(train.nowt, target, minority.value, vars.numeric, k , seed)
synt.adasyn <- synt.adasyn %>% mutate(across(all_of(vars.numeric), as.numeric))
# Ajuste de Pesos para los datos sintéticos
synt.adasyn$FACTOR_EXPANSION = 1
train.adasyn <- train
train.adasyn$Pertenece = 0
synt.adasyn$Pertenece = 1
resample.adasyn = rbind(train.adasyn, synt.adasyn)
ids = seq(1, nrow(resample.adasyn))
design.adasyn <- svydesign(ids = ids, data = resample.adasyn, weights = resample.adasyn$FACTOR_EXPANSION)
model.adasyn = svyglm(formula = Pertenece ~ ZONA_TERRITORIAL + SEXO + EDAD +
ETNIA + ESTADO_CIVIL + LEER_ESCRIBIR + ACTUALMENTE_ESTUDIA +
MAYOR_NIVEL_EDUCATIVO + ORIENTACION_SEXUAL + GENERO + TIPO_VIVIENDA +
ESTRATO_ENERGIA_ELECTRICA + NUMERO_HOGARES_VIVIENDA + NUMERO_CUARTOS_VIVIENDA +
NUMERO_CUARTOS_DORMIR + DONDE_OBTIENE_AGUA + DONDE_PREPARA_ALIMENTOS +
TIPO_OCUPACION_VIVIENDA + NUMERO_PERSONAS_HOGAR + DISCAPACIDAD,
design = design.adasyn,
family = quasibinomial())
p_i.adasyn <- predict(model.adasyn, synt.adasyn, type = "response")
w_i.adasyn = 1/p_i.adasyn
synt.adasyn$FACTOR_EXPANSION <- w_i.adasyn
## Ajuste de los pesos
n_s_x = nrow(synt.adasyn)
n_s = nrow(train.adasyn)
w_i_x <- synt.adasyn$FACTOR_EXPANSION * ((n_s_x)/(n_s_x + n_s)) *((sum(train.adasyn$FACTOR_EXPANSION))/(sum(synt.adasyn$FACTOR_EXPANSION)))
w_i <- train.adasyn$FACTOR_EXPANSION * ((n_s)/(n_s + n_s_x))
synt.adasyn$FACTOR_EXPANSION <- w_i_x
train.adasyn$FACTOR_EXPANSION <- w_i
full.adasyn <- rbind(train.adasyn, synt.adasyn)
# Evaluación del Modelo
adasyn.glm <- survey_model(full.adasyn, test, "FACTOR_EXPANSION")
#### 3. Versión
### Método SWSMOTEENC
factor.expansion <- train$FACTOR_EXPANSION
synt.swsmoteenc = SWSMOTEENC(train.nowt, factor.expansion, target, minority.value, vars.numeric, k , seed)
synt.swsmoteenc <- synt.swsmoteenc %>% mutate(across(all_of(vars.numeric), as.numeric))
# Ajuste de Pesos para los datos sintéticos
synt.swsmoteenc$FACTOR_EXPANSION = 1
train.swsmoteenc <- train
train.swsmoteenc$Pertenece = 0
synt.swsmoteenc$Pertenece = 1
resample.swsmoteenc = rbind(train.swsmoteenc, synt.swsmoteenc)
ids = seq(1, nrow(resample.swsmoteenc))
design.swsmoteenc <- svydesign(ids = ids, data = resample.swsmoteenc, weights = resample.swsmoteenc$FACTOR_EXPANSION)
model.swsmoteenc = svyglm(formula = Pertenece ~ ZONA_TERRITORIAL + SEXO + EDAD +
ETNIA + ESTADO_CIVIL + LEER_ESCRIBIR + ACTUALMENTE_ESTUDIA +
MAYOR_NIVEL_EDUCATIVO + ORIENTACION_SEXUAL + GENERO + TIPO_VIVIENDA +
ESTRATO_ENERGIA_ELECTRICA + NUMERO_HOGARES_VIVIENDA + NUMERO_CUARTOS_VIVIENDA +
NUMERO_CUARTOS_DORMIR + DONDE_OBTIENE_AGUA + DONDE_PREPARA_ALIMENTOS +
TIPO_OCUPACION_VIVIENDA + NUMERO_PERSONAS_HOGAR + DISCAPACIDAD,
design = design.swsmoteenc,
family = quasibinomial())
p_i.swsmoteenc <- predict(model.swsmoteenc, synt.swsmoteenc, type = "response")
w_i.swsmoteenc = 1/p_i.swsmoteenc
synt.swsmoteenc$FACTOR_EXPANSION <- w_i.swsmoteenc
## Ajuste de los pesos
n_s_x = nrow(synt.swsmoteenc)
n_s = nrow(train.swsmoteenc)
w_i_x <- synt.swsmoteenc$FACTOR_EXPANSION * ((n_s_x)/(n_s_x + n_s)) *((sum(train.swsmoteenc$FACTOR_EXPANSION))/(sum(synt.swsmoteenc$FACTOR_EXPANSION)))
w_i <- train.swsmoteenc$FACTOR_EXPANSION * ((n_s)/(n_s + n_s_x))
synt.swsmoteenc$FACTOR_EXPANSION <- w_i_x
train.swsmoteenc$FACTOR_EXPANSION <- w_i
full.swsmoteenc <- rbind(train.swsmoteenc, synt.swsmoteenc)
# Evaluación del Modelo
swsmoteenc.glm <- survey_model(full.swsmoteenc, test, "FACTOR_EXPANSION")
exp(09-48733)
exp(0.48733)
exp(0.48772)
## Dataframe Base
data <- read.csv("C:/Users/andre/OneDrive/Escritorio/Proyecto de Grado/result/db_feature_selection/Enero_Agrupado.csv", sep=";")
install.packages("weights")
library(survey)
library(weights)
library(survey)
library(weights)
install.packages("Hmisc")
library(weights)
## Dataframe Base
data <- read.csv("C:/Users/andre/OneDrive/Escritorio/Proyecto de Grado/result/db_feature_selection/Enero_Agrupado.csv", sep=";")
data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA = as.factor(data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA)
vars.numeric <- names(data)[sapply(data, is.numeric)]
## Dataframe Base
data <- read.csv("C:/Users/andre/OneDrive/Escritorio/Proyecto de Grado/result/db_feature_selection/Enero_Agrupado.csv", sep=";")
data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA = as.factor(data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA)
vars.numeric <- names(data)[sapply(data, is.numeric)]
vars.categoric <- names(data)[!names(data) %in% vars.numeric]
vars.categoric <- vars.categoric[vars.categoric != "ACTIVIDAD_OCUPADA_ULTIMA_SEMANA"]
## Dataframe Base
data <- read.csv("C:/Users/andre/OneDrive/Escritorio/Proyecto de Grado/result/db_agrupado/Enero_Agrupado.csv", sep=";")
data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA = as.factor(data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA)
vars.numeric <- names(data)[sapply(data, is.numeric)]
vars.categoric <- names(data)[!names(data) %in% vars.numeric]
vars.categoric <- vars.categoric[vars.categoric != "ACTIVIDAD_OCUPADA_ULTIMA_SEMANA"]
wtd.chi.sq(data$SEXO, data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA)
wtd.chi.sq(data$SEXO, data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA, weight = data$FACTOR_EXPANSION)
lapply(vars.categoric, function(i){
value = wtd.chi.sq(data[[i]], data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA, weight = data$FACTOR_EXPANSION)
return(value)
})
sapply(vars.categoric, function(i){
value = wtd.chi.sq(data[[i]], data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA, weight = data$FACTOR_EXPANSION)
return(value)
})
data.frame(t(sapply(vars.categoric, function(i){
value = wtd.chi.sq(data[[i]], data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA, weight = data$FACTOR_EXPANSION)
return(value)
})))
chi_square_result = data.frame(t(sapply(vars.categoric, function(i){
value = wtd.chi.sq(data[[i]], data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA, weight = data$FACTOR_EXPANSION)
return(value)
})))
sort(chi_square_result)
chi_square_result
chi_square_result[order(chi_square_result$Chisq),]
wtd.cor(data$EDAD, data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA, weight = data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA)
data$ACT_NUM = as.numeric(data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA)
data$ACT_NUM
data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA
wtd.cor(data$EDAD, data$ACT_NUM, weight = data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA)
wtd.cor(data$EDAD, data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA, weight = data$FACTOR_EXPANSION)
wtd.cor(data$EDAD, data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA, weight = data$FACTOR_EXPANSION)
wtd.cor(data$EDAD, data$ACT_NUM, weight = data$FACTOR_EXPANSION)
corr_result = data.frame(t(sapply(vars.numeric, function(i){
value = wtd.cor(data[[i]], data$ACT_NUM, weight = data$FACTOR_EXPANSION)
return(value)
})))
corr_result
corr_result[order(corr_result$X1),]
chi_square_result
wtd.cor(data$NUMERO_PERSONAS_HOGAR, data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA)
wtd.cor(data$NUMERO_PERSONAS_HOGAR, data$ACT_NUM)
wtd.cor(data$NUMERO_PERSONAS_HOGAR, data$ACT_NUM, weight = data$FACTOR_EXPANSION)
chi_square_result[order(chi_square_result$Chisq),]
corr_result[order(corr_result$X1),]
sapply(vars.numeric, function(i){
value = wtd.cor(data[[i]], data$ACT_NUM, weight = data$FACTOR_EXPANSION)
return(value)
})
lapply(vars.numeric, function(i){
value = wtd.cor(data[[i]], data$ACT_NUM, weight = data$FACTOR_EXPANSION)
return(value)
})
unlist(lapply(vars.numeric, function(i){
value = wtd.cor(data[[i]], data$ACT_NUM, weight = data$FACTOR_EXPANSION)
return(value)
}))
lapply(vars.numeric, function(i){
value = wtd.cor(data[[i]], data$ACT_NUM, weight = data$FACTOR_EXPANSION)
return(value)
})
colnames(corr_result) = c("correlation","std.err","t.value","p,value")
corr_result
corr_result[order(corr_result$correlation),]
library(survey)
library(weights)
## Dataframe Base
data <- read.csv("C:/Users/andre/OneDrive/Escritorio/Proyecto de Grado/result/db_agrupado/Enero_Agrupado.csv", sep=";")
data <- subset(data, select = -DIRECTORIO)
data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA = as.factor(data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA)
vars.numeric <- names(data)[sapply(data, is.numeric)]
vars.numeric <- vars.numeric[vars.numeric != "FACTOR_EXPANSION"]
vars.categoric <- names(data)[!names(data) %in% vars.numeric]
vars.categoric <- vars.categoric[vars.categoric != "ACTIVIDAD_OCUPADA_ULTIMA_SEMANA"]
wtd.chi.sq(data$SEXO, data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA, weight = data$FACTOR_EXPANSION)
chi_square_result = data.frame(t(sapply(vars.categoric, function(i){
value = wtd.chi.sq(data[[i]], data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA, weight = data$FACTOR_EXPANSION)
return(value)
})))
chi_square_result[order(chi_square_result$Chisq),]
chi_square_result[order(chi_square_result$Chisq,decreasing = TRUE),]
data$ACT_NUM = as.numeric(data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA)
corr_result = data.frame(t(sapply(vars.numeric, function(i){
value = wtd.cor(data[[i]], data$ACT_NUM, weight = data$FACTOR_EXPANSION)
return(value)
})))
colnames(corr_result) = c("correlation","std.err","t.value","p,value")
corr_result[order(corr_result$correlation),]
numeric(data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA)
as.numeric(data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA)
as.numeric(data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA)
data$ACT_NUM = as.numeric(data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA)
corr_result = data.frame(t(sapply(vars.numeric, function(i){
value = wtd.cor(data[[i]], data$ACT_NUM, weight = data$FACTOR_EXPANSION)
return(value)
})))
colnames(corr_result) = c("correlation","std.err","t.value","p,value")
corr_result[order(corr_result$correlation),]
install.packages("papaja")
install.packages("papaja")
setwd("C:\Users/andre/OneDrive/Escritorio/Proyecto de Grado")
setwd("C:/Users/andre/OneDrive/Escritorio/Proyecto de Grado")
r_refs("Referencias.bib")
r_refs("Referencias.bib")
library("papaja")
r_refs("Referencias.bib")
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
nocite: '@*'
knitr::opts_chunk$set(echo = TRUE)
table(data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA)
```{r}
table(data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA)
table(data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA)
vars.numeric <- names(train.nowt)[sapply(train.nowt, is.numeric)]
## Librerias Necesarias y Archivos Base
library(survey)
library(weights)
library(dplyr)
# Scripts de R con las funciones de balanceo
source("C:\\Users\\andre\\OneDrive\\Escritorio\\Proyecto de Grado\\notebooks\\R\\oversampling.R")
## Dataframe Base
data <- read.csv("C:/Users/andre/OneDrive/Escritorio/Proyecto de Grado/result/db_agrupado/Enero_Agrupado.csv", sep=";")
data <- subset(data, select = -DIRECTORIO)
### Procesamiento Inicial y Necesario
data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA = as.factor(data$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA)
vars.numeric <- names(data)[sapply(data, is.numeric)]
vars.numeric <- vars.numeric[vars.numeric != "FACTOR_EXPANSION"]
vars.categoric <- names(data)[!names(data) %in% vars.numeric]
vars.categoric <- vars.categoric[vars.categoric != "ACTIVIDAD_OCUPADA_ULTIMA_SEMANA"]
## Plantación de Semilla y Valores Base
seed = 3
set.seed(seed)
size = 0.8
target = "ACTIVIDAD_OCUPADA_ULTIMA_SEMANA"
minority.value = 0
k = 5
## Definición del Conjunto de Prueba y Entrenamiento, ajuste del conjunto de entrenamiento
## Train Test split
train_index <- sample(nrow(data), size = size * nrow(data), replace = FALSE)
train <- data[train_index, ]
test <- data[-train_index, ]
rownames(train) <- NULL
rownames(test) <- NULL
## Ajuste del conjunto de entrenamiento para la generación de las muestras sintéticas
train.nowt <- subset(train, select = -FACTOR_EXPANSION)
train.nowt$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA = as.factor(train.nowt$ACTIVIDAD_OCUPADA_ULTIMA_SEMANA)
vars.numeric <- names(train.nowt)[sapply(train.nowt, is.numeric)]
